;; HOMEWORK 7

;;; A Sprite is a (make-sprite Posn Posn Number String) 
;;; Interpretation: (make-sprite p1 p2 r c) is a sprite with p1 as its location, p2 is its 
;;; velocity, r is the size of the radius of the sprite and c is its color. Location, velocity
;;; and size are in computer-graphic/pixel coordinates. A sprite represents either an attacker's 
;;; missile or a defender's anti-missile bullet. 
(define-struct sprite (loc vel size color)) 
 
;; A LOS (list of sprites) is one of: 
;; - empty 
;; - (cons Sprite LOS) 
 
;;; A World structure is a (make-world LOS LOS Number) 
;;; Interpretation: (make-world m b h) is a world with m missiles (the missiles attacking
;;; the player), b bullets (bullets launched by the player) and h health (current 
;;; health of the player -- game-over if health <= 0) 
(define-struct world (missiles bullets health))

;; A color is one of:
;; - "red"
;; - "blue"

;;-------- VARIABLE DEFINITIONS --------;;
(require 2htdp/image)
(require 2htdp/universe)

;;;;;; Constants
(define MRADIUS 5)
(define BRADIUS 2.5)
(define MISSILE (circle MRADIUS 'solid 'red))
(define BULLET (circle BRADIUS 'solid 'blue))
(define GUN (square 10 'solid 'blue))
(define OUTLINE (rectangle 400 500 "outline" "black"))
(define BG (place-image GUN 200 495 OUTLINE))

;;;;;; Missiles
(define m1 (make-sprite (make-posn 50 50) (make-posn 10 10) MRADIUS "red"))
(define m2 (make-sprite (make-posn 60 60) (make-posn 5 10) MRADIUS "red"))
(define m3 (make-sprite (make-posn 60 60) (make-posn 10 10) MRADIUS "red"))
(define m4 (make-sprite (make-posn 65 70) (make-posn 5 10) MRADIUS "red")) 
(define m7 (make-sprite (make-posn 300 400) (make-posn 10 10) MRADIUS "red")) 
;; m7 will collide with b2 instantly or b5 after one tick
(define m8 (make-sprite (make-posn 350 500) (make-posn 10 10) MRADIUS "red")) 
;; m8 will detonate instantly or after one tick
(define m9 (make-sprite (make-posn 350 450) (make-posn 10 10) MRADIUS "red"))
;; m9 will collide with b1 instantly


;;;;;; Lists of Missiles
(define lom0 empty)
(define lom1 (list m1 m2))
(define lom2 (list m3 m4))
(define lom3 (list m1 m8 m9)) ;; Includes a detonation
(define lom4 (list m1 m7 m8)) ;; Includes a detonation and a possible collision with b2/b5

;;;;;; Bullets
(define b1 (make-sprite (make-posn 350 450) (make-posn -10 -10) BRADIUS "blue"))
;; b1 will collide with m9 instantly
(define b2 (make-sprite (make-posn 300 400) (make-posn -5 -5) BRADIUS "blue")) 
;; b2 will collide with m7 instantly
(define b3 (make-sprite (make-posn 340 440) (make-posn -10 -10) BRADIUS "blue"))
(define b4 (make-sprite (make-posn 295 395) (make-posn -5 -5) BRADIUS "blue"))
(define b5 (make-sprite (make-posn 320 420) (make-posn -10 -10) BRADIUS "blue")) 
;; b5 will collide with m7 after one tick

;; Lists of Bullets
(define lob0 empty)
(define lob1 (list b1 b2))
(define lob2 (list b3 b4))
(define lob3 (list b2 b5)) ;; Includes a possible collision with m7

;; Worlds
(define world0 (make-world lom0 lob0 10)) ;; Empty/Initial world
(define world1 (make-world lom1 lob1 5))
(define world2 (make-world lom2 lob2 5))
(define world3 (make-world lom3 lob2 5)) ;; Detonation
(define world4 (make-world lom3 lob1 5)) ;; Detonation
(define world5 (make-world lom4 lob3 6)) ;; Detonation and collision b2/b5 with m7
(define world6 (make-world lom1 lob1 0)) ;; This world is dead

;;-------------------------------------- FUNCTION DEFINITIONS --------------------------------------;;


;;--------------------------------- TO-DRAW ---------------------------------;;

;; draw-world: World -> Image
;; Draws the world with missles and bullets
(define (draw-world w)
    (overlay/align
     'center
     'center
     (draw-los (world-bullets w) BULLET)
     (draw-los (world-missiles w) MISSILE)
              BG))

;; Tests
(check-expect (draw-world world0) BG)
(check-expect (draw-world world1) 
              (place-image 
               MISSILE 50 50
               (place-image 
                MISSILE 60 60
                (place-image 
                 BULLET 350 450
                 (place-image 
                  BULLET 300 400 BG)))))

;; draw-los: LOS Shape -> Image
;; Draws a list of sprites onto a canvas
(define (draw-los alos shape)
  (cond
    [(empty? alos) BG]
    [(cons? alos) (place-image shape 
                               (posn-x (sprite-loc (first alos)))
                               (posn-y (sprite-loc (first alos)))
                               (draw-los (rest alos) shape))]))

;; Tests
(check-expect (draw-los lom1 MISSILE) 
              (place-image
               MISSILE 50 50
               (place-image
                MISSILE 60 60 BG)))
(check-expect (draw-los lob1 BULLET) 
              (place-image
               BULLET 350 450
               (place-image
                BULLET 300 400 BG)))


;;--------------------------------- ON-MOUSE ---------------------------------;;

;; add-bullet: World Number Number Mouse-Event -> World
;; Adds a bullet traveling in the direction of the mouse event
(define (add-bullet w x y me)
  (if (mouse=? me "button-down")
      (make-world (world-missiles w)
                  (cons (make-sprite (make-posn 200 500)
                                     (make-posn (floor (/ (- x 200)
                                                          (/ (- 500 y) 15)))
                                                -15)
                                     BRADIUS
                                     "blue")
                        (world-bullets w))
                  (world-health w))
      w))

;; Tests
(check-expect (add-bullet world1 200 100 "button-up")
              world1)
(check-expect (add-bullet world1 200 100 "button-down")
              (make-world (world-missiles world1)
                          (cons (make-sprite (make-posn 200 500)
                                             (make-posn 0 -15)
                                             BRADIUS
                                             "blue")
                                (world-bullets world1))
                          (world-health world1)))


;;-------------------------------- STOP-WHEN --------------------------------;;

;; halt: World -> Boolean
;; Determines if health is at 0
(define (halt-world w)
  (<= (world-health w) 0))

;; Tests
(check-expect (halt-world world0) false)
(check-expect (halt-world world6) true)

;;--------------------------------- ON-TICK ---------------------------------;;

;; update-world: World -> World
;; Step the world forward one tick
(define (update-world w)
  (missile-me-maybe 
   (detonate-missiles 
    (remove-dead-sprites 
     (make-world (move-los (world-missiles w))
                 (move-los (world-bullets w))
                 (world-health w))))))

;; Test
;; Similar to missile-me-maybe, we can check using "and" that all of our functions worked
;; and that the length of the list of missiles is either the same or has added one
(check-expect (and
               (<= 1 (length (world-missiles (update-world world5))) 2)
               (equal? (world-bullets (update-world world5)) (list (move-sprite b2)))
               (= (world-health (update-world world5)) 5))
              true)

;---------------------------- Movement Functions

;; Move-sprite: Sprite -> Sprite
;; Moves a single bullet one time step and removes any that are offscreen
(define (move-sprite as)
  (make-sprite (make-posn (+ (posn-x (sprite-loc as)) (posn-x (sprite-vel as)))
                          (+ (posn-y (sprite-loc as)) (posn-y (sprite-vel as))))
               (sprite-vel as)
               (sprite-size as)
               (sprite-color as)))

(check-expect (move-sprite b1) b3)

;--------------

;; move-los: LOS -> LOS
;; Moves the bullets one time step and removes any that are offscreen
(define (move-los alos)
  (cond
    [(empty? alos) empty]
    [(cons? alos) (if (< 0 (posn-x (sprite-loc (first alos))) 400)
                      (cons (move-sprite (first alos)) (move-los (rest alos)))
                      (move-los (rest alos)))]))

;; Tests
(check-expect (move-los lob1) lob2)

;--------------

;; move-bullets: World -> World
;; Moves the bullets one time step and removes any that are offscreen
(define (move-bullets w)
  (make-world (move-los (world-missiles w))
              (move-los (world-bullets w))
              (world-health w)))

;; Tests
(check-expect (move-bullets world1) world2)

;---------------------------- Detonation Functions

;; hit-ground?: Missile -> Boolean
;; Checks if a missile has hit the ground
(define (hit-ground h)
  (>= (+ (posn-y (sprite-loc h)) (sprite-size h)) 500))

;; Tests
(check-expect (hit-ground m8) true)
(check-expect (hit-ground m1) false)

;--------------

;; hit-list; LOS -> LOS
;; Checks a list of sprites to see if any hit the ground
(define (hit-list los)
  (cond [(empty? los) empty]
        [(cons? los) (if (hit-ground (first los))
                         (hit-list (rest los))
                         (cons (first los) (hit-list (rest los))))]))

;; Tests
(check-expect (hit-list empty) empty)
(check-expect (hit-list lom3) (list m1 m9))

;--------------

;; new-health: LOS -> Number
;; Determines the amount of health lost during a collision
(define (new-health n)
  (- (length n) (length (hit-list n))))

;; Tests
(check-expect (new-health lom2) 0)
(check-expect (new-health lom3) 1)

;--------------

;; detonate-missiles: World -> World
;; Remove missiles that landed and decreases players health if they landed
(define (detonate-missiles w)
  (make-world (hit-list (world-missiles w)) 
              (world-bullets w) 
              (- (world-health w) 
                 (new-health (world-missiles w)))))

;; Tests
(check-expect (detonate-missiles world3) 
              (make-world (list m1 m9) lob2 4))
(check-expect (detonate-missiles 
               (remove-dead-sprites 
                (make-world (move-los (world-missiles world5))
                            (move-los (world-bullets world5))
                            (world-health world5))))
              (make-world (list (move-sprite m1)) 
                          (list (move-sprite b2)) 
                          5))

;---------------------------- Collision Functions

;;collide?: Sprite Sprite -> Boolean
;; Checks if two sprites collide
(define (collide? s1 s2)
  (> (+ (sprite-size s1) (sprite-size s2))
     (sqrt (+ (sqr (- (posn-x (sprite-loc s2)) (posn-x (sprite-loc s1))))
              (sqr (- (posn-y (sprite-loc s2)) (posn-y (sprite-loc s1))))))))

;; Tests
(check-expect (collide? m1 b1) false)
(check-expect (collide? m9 b1) true)
(check-expect (collide? m8 b1) false)
(check-expect (collide? m8 b2) false)

;--------------

;; collide-los: Sprite LOS -> LOS 
;; Checks if a given missle has collided with any of the bullets
(define (collide-los s los)
  (cond [(empty? los) empty]
        [(cons? los) (if (collide? s (first los))
                         (collide-los s (rest los))
                         (cons (first los) 
                               (collide-los s (rest los))))]))

;; Tests
(check-expect (collide-los m9 lob1) (list b2))
(check-expect (collide-los b1 lom3) (list m1 m8))
(check-expect (collide-los b1 lom4) (list m1 m7 m8))
(check-expect (collide-los b2 lom4) (list m1 m8))

;--------------

;; collide-los-los: LOS LOS -> LOS
;; Checks a given list against another list to see if any have collided
(define (collide-los-los los1 los2)
  (cond [(empty? los1) los2]
        [(cons? los1) (collide-los-los (rest los1) 
                                       (collide-los (first los1) los2))]))

;; Tests
(check-expect (collide-los-los (list m1 m2 m9) (list b2 b1)) 
              (list b2))
(check-expect (collide-los-los (list b2 b1) (list m1 m2 m9)) 
              (list m1 m2))

;--------------

;; remove-dead-sprites: World -> World
;; Remove every missile that is touching some bullet and vice-versa
(define (remove-dead-sprites w)
  (make-world (collide-los-los (world-bullets w) (world-missiles w))
              (collide-los-los (world-missiles w) (world-bullets w)) 
              (world-health w)))

(check-expect (remove-dead-sprites world4)
              (make-world (list m1 m8) (list b2) 5))
(check-expect (remove-dead-sprites 
               (make-world (move-los (world-missiles world5))
                           (move-los (world-bullets world5))
                           (world-health world5)))
              (make-world (list (move-sprite m1) (move-sprite m8)) 
                          (list (move-sprite b2)) 
                          6))

;---------------------------- Missile Creation Functions


;; These three functions were originally to break up the work that
;; missile-me-maybe did, but they never output a different random
;; position/velocity, so all missiles followed the same path
;--------------
#|
;; vel-rand: Number -> Posn
;; Returns a random posn to be used for missile velocity
(define vel-rand
  (make-posn (if (= 0 (random 2))
                 (- 0 (random 5))
                 (random 5))
             3))

;; Test
(check-within (posn-x vel-rand) 0 5)
(check-expect (posn-y vel-rand) 3)

;--------------

;; posn-rand: Number -> Posn
;; Returns a random posn to be used for missile posn
(define posn-rand
  (make-posn (random 501) 0))

;; Test
(check-within (posn-x posn-rand) 250 250)
(check-expect (posn-y posn-rand) 0)

;--------------

;; missile-rand: Null -> Missile
;; Generates a missile with a random position determined by posn-rand
;; and a random velocity determined by vel-rand
(define missile-rand
  (make-sprite posn-rand
               vel-rand
               MRADIUS
               "red"))

;; Tests
(check-within (posn-x (sprite-loc missile-rand)) 250 250)
(check-within (posn-x (sprite-vel missile-rand)) 0 5)
(check-expect (posn-y (sprite-loc missile-rand)) 0)
(check-expect (posn-y (sprite-vel missile-rand)) 3)
|#
;--------------

;; missile-me-maybe: World -> World
;; Has a 1/50 chance to generate a missile with a random location and 
;; velocity
(define (missile-me-maybe w)
  (if (= 0 (random 20))
      (make-world (cons (make-sprite (make-posn (random 501) 0)
                                     (make-posn (if (= 0 (random 2))
                                                    (- 0 (random 3))
                                                    (random 3))
                                                3)
                                     MRADIUS
                                     "red")
                        (world-missiles w))
                  (world-bullets w)
                  (world-health w))
      w))

;; Tests
;; Since there are 501x13 possibilities for missiles with different locations
;; and velocities, we simply check if the list of missiles is the same length
;; or has added one because we know from successful tests that missile-rand
;; creates a missile with our random parameters
(check-member-of (length (world-missiles (missile-me-maybe world0))) 0 1)



;;--------------------------------- MAIN ---------------------------------;;

;; main: World -> World
;; Runs the missle defense game
(define (main w)
    (big-bang w
              (to-draw draw-world)
              (on-tick update-world)
              (on-mouse add-bullet)
              (stop-when halt-world)))

;; Run with empty initial conditions
(main world0)




